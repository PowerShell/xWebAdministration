[ClassVersion("2.0.0"), FriendlyName("FTP")]
class MSFT_FTP : OMI_BaseResource
{
    [Write,ValueMap{"Present", "Absent"},Values{"Present", "Absent"}] String Ensure;
    [Key, Description("Specifies the name of the FTP site.")] String Name;
    [Write, Description("Specifies physical location of the FTP site.")] String PhysicalPath;
    [Write, Description("Specifies the username for physical path access of the FTP site.")] String PhysicalPathAccessAccount;
    [Write, Description("Specifies the password for physical path access of the FTP site.")] String PhysicalPathAccessPass;
    [Write,ValueMap{"Started","Stopped"},Values{"Started", "Stopped"}] String State;
    [Write, Description("Specifies the name of the application pool to be used.")] String ApplicationPool;
    [Write, EmbeddedInstance("MSFT_FTPAuthenticationInformation"), Description("Hashtable containing authentication information (Anonymous, Basic)")] String AuthenticationInfo;
    [Write, EmbeddedInstance("MSFT_FTPAuthorizationInformation"), Description("Hashtable containing authentication information (AccessType, Roles, Permissions, Users)")] String AuthorizationInfo[];
    [Write, EmbeddedInstance("MSFT_FTPBindingInformation"), Description("Website's binding information in the form of an array of embedded instances of the MSFT_FTPBindingInformation CIM class.")] String BindingInfo[];
    [Write, EmbeddedInstance("MSFT_FTPSslInformation"), Description("Hashtable containing Ssl information (ControlChannelPolicy, DataChannelPolicy, RequireSsl128, CertificateThumbprint, CertificateStoreName)")] String SslInfo;
    [Write, Description ("The external firewall IP address used for passive connections")] String FirewallIPAddress;
    [Write, Description ("The starting port number in port range used for data connections in passive mode")] UInt16 StartingDataChannelPort;
    [Write, Description ("The ending port number in port range used for data connections in passive mode")] UInt16 EndingDataChannelPort;
    [Write, Description ("The message the FTP server displays when FTP clients have logged in to the FTP server")] String GreetingMessage;
    [Write, Description ("The message the FTP server displays when FTP clients log off the FTP server")] String ExitMessage;
    [Write, Description ("The message the FTP server displays when FTP clients first connect to the FTP server")] String BannerMessage;
    [Write, Description ("The message when clients cannot connect because the FTP service has reached the maximum number of client connections allowed")] String MaxClientsMessage;
    [Write, Description ("Whether to display the default identification banner for the FTP server")] Boolean SuppressDefaultBanner;
    [Write, Description ("Whether to display detailed error messages on the local host")] Boolean AllowLocalDetailedErrors;
    [Write, Description ("Whether to display a specific set of user variables in FTP messages")] Boolean ExpandVariablesInMessages;
    [Write, Description ("The directory to be used for logfiles")] String LogPath;
    [Write, Description ("The W3C logging fields"), ValueMap{"Date","Time","ClientIP","UserName","ServerIP","Method","UriStem","UriQuery","HttpStatus","Win32Status","TimeTaken","ServerPort","UserAgent","Referer","HttpSubStatus"},Values{"Date","Time","ClientIP","UserName","ServerIP","Method","UriStem","UriQuery","HttpStatus","Win32Status","TimeTaken","ServerPort","UserAgent","Referer","HttpSubStatus"}] String LogFlags[];
    [Write, Description ("How often the log file should rollover"), ValueMap{"Hourly","Daily","Weekly","Monthly","MaxSize"},Values{"Hourly","Daily","Weekly","Monthly","MaxSize"}] String LogPeriod;
    [Write, Description ("How large the file should be before it is truncated")] String LogTruncateSize;
    [Write, Description ("Use the localtime for file naming and rollover")] Boolean LoglocalTimeRollover;
    [Write, Description ("What method of Directory Browsing should be enabled"), ValueMap{"StyleUnix","LongDate","DisplayAvailableBytes","DisplayVirtualDirectories"},Values{"StyleUnix","LongDate","DisplayAvailableBytes","DisplayVirtualDirectories"}] String DirectoryBrowseFlags[];
    [Write, Description ("What method of UserIsolation should be enabled"), ValueMap{"None","StartInUsersDirectory","IsolateAllDirectories","IsolateRootDirectoryOnly"},Values{"None","StartInUsersDirectory","IsolateAllDirectories","IsolateRootDirectoryOnly"}] String UserIsolation;
};

[ClassVersion("1.0.0")]
class MSFT_FTPSslInformation
{
    [Write,ValueMap{"SslAllow", "SslRequire", "SslRequireCredentialsOnly"},Values{"SslAllow", "SslRequire", "SslRequireCredentialsOnly"}] String ControlChannelPolicy;
    [Write,ValueMap{"SslAllow", "SslRequire", "SslDeny"},Values{"SslAllow", "SslRequire", "SslDeny"}] String DataChannelPolicy;
    [Write] Boolean RequireSsl128;
    [Write] String CertificateThumbprint;
    [Write,ValueMap{"My", "WebHosting"},Values{"My", "WebHosting"}] String CertificateStoreName;
};

[ClassVersion("1.0.0")]
class MSFT_FTPBindingInformation
{
    [Required,ValueMap{"ftp"},Values{"ftp"}] String Protocol;
    [Write] String BindingInformation;
    [Write] String IPAddress;
    [Write] UInt16 Port;
    [Write] String HostName;
};

[ClassVersion("1.0.0")]
class MSFT_FTPAuthorizationInformation
{
    [Write,ValueMap{"Allow", "Deny"},Values{"Allow", "Deny"}] String AccessType;
    [Write] String Roles;
    [Write,ValueMap{"Read", "Write", "Read,Write" },Values{"Read", "Write", "Read,Write"}] String Permissions;
    [Write] String Users;
};

[ClassVersion("1.0.0")]
class MSFT_FTPAuthenticationInformation
{
    [Write] Boolean Anonymous;
    [Write] Boolean Basic;
};
